{"version":3,"sources":["components/gamecreation/WaitScreen.js","components/welcomescreen/Avatars.js","components/signup/Join.js","components/storyrevealed/StoryRevealed.js","components/welcomescreen/HelpModal.js","components/welcomescreen/HomeScreen.js","components/writingpaper/HelpModal.js","components/writingpaper/RemovePlayerModal.js","components/writingpaper/WritingPaper.js","components/mainpage/MainPage.js","App.js","index.js"],"names":["WaitScreen","props","copyCodeToClipboard","textArea","select","document","execCommand","getPlayers","gameId","console","log","axios","get","then","game","updateAllTheThings","updateAllPlayers","data","players","updateRemovablePlayers","setState","gameStarted","state","gameInfo","copySuccess","copied","removablePlayers","this","intervalID","setInterval","bind","clearInterval","allPlayers","playerBoard","i","length","push","name","playerNumber","class","to","className","controlId","value","gameIdUrl","ref","textarea","text","onCopy","Button","variant","_id","map","item","isHost","disabled","onClick","startGame","React","Component","Avatars","selectEmoji","code","emoji","updateAvatar","onEmojiClick","Join","updateState","removeHostStatus","removePreviousFinalStory","resetPlayerChoseAvatar","resetPlayerToDelete","resetRounds","resetPlayerName","resetPlayerId","resetAppLevelRound","resetHasFinalStory","resetRemovablePlayers","resetAllPlayers","putPlayer","e","playerSubmitted","player","playerName","playerAvatar","avatar","put","res","updatePlayerNumber","updatePlayerId","playerId","getCodeFromURL","URL","window","location","href","lengthOfURL","toUpperCase","slice","updateGameIdUrl","updateGameId","grabGameInfo","rounds","doesGameExist","howManyRounds","hasGameStarted","hasStarted","gameHasStarted","Form","Group","Label","Control","type","placeholder","onChange","updateName","playerChoseAvatar","Alert","transition","Storyrevealed","finalStory","HelpModal","useState","show","setShow","handleClose","Modal","onHide","centered","Header","closeButton","Title","Body","Footer","HomeScreen","updateHost","target","updateRounds","deleteDefaultText","updateGameIdValue","gameURLGenerator","result","charactersLength","charAt","Math","floor","random","newGame","post","createGame","newGameInfo","number","test","as","hostSetsRoundNumber","RemovePlayerModal","handleShow","useEffect","Check","label","updatePlayerToDelete","id","funtime","removePlayer","Writingpaper","snarkyWaitingLines","hasEveryoneSubmitted","storySubmitted","hasFinalStory","info1","round","currentRound","everyoneHasSubmitted","playersStillWorking","newPlayerNumber","newNumber","showSnarkyWaitingLine","isLastRound","info2","appLevelRound","updateFinalStory","updateHasFinalStory","previousPersonsWriting","info3","story","previousPerson","updateAppLevelRound","nudgeText","updateSnarkyWaitingLine","updateStory","charactersLeft","charactersAllowed","charactersUsed","putWriting","playerStory","appRound","postSubmissionUpdate","success","submitStory","tryToSubmit","neverMind","quitGame","newSnarkyLine","snarkyWaitingLine","minimimumCharactersRequired","roundForAppUpdate","endGame","makeLastRound","needHelp","avatarOfPreviousPerson","lastLine","waitText","snark","spaceCounter","maxLength","defaultValue","ProgressBar","now","min","max","playerToDelete","MainPage","updateGameIdNow","gameIdValue","App","newRemovablePlayers","playerNumberToDelete","info","playerInfo","parseInt","gameIndex","doesGameIdExist","parent","path","render","test1","StoryRevealed","exact","WritingPaper","updateRoundNumber","updatePlayerNummber","playersToDelete","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.18db8343.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport \"./waitscreen.css\";\r\nimport { Button } from 'react-bootstrap';\r\n// import Form from 'react-bootstrap/Form';\r\n// import Button from 'react-bootstrap/Button';\r\n// import Dropdown from 'react-bootstrap/Dropdown';\r\n// import DropdownButton from 'react-bootstrap/DropdownButton';\r\n\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\n\r\nclass WaitScreen extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      gameInfo: \"Default\",\r\n      gameStarted: false,\r\n      copySuccess: '',\r\n      copied: false,\r\n      removablePlayers: \"Default\"\r\n    }\r\n  }\r\n\r\n  intervalID;\r\n\r\n  componentDidMount() {\r\n    this.getPlayers();\r\n    // pausing for now so it stops fetching lol\r\n    this.intervalID = setInterval(this.getPlayers.bind(this), 3000);\r\n  }\r\n\r\n  // updateRounds = (e) => {\r\n  //   console.log(\"lets update those rounds\");\r\n  //   this.setState ({ rounds: e.target.value })\r\n  // }\r\n\r\n//   copy = (e) => {\r\n//   /* Get the text field */\r\n//   let copyText = this.props.gameIdUrl;\r\n//   // console.log(e.target.value);\r\n//   /* Select the text field */\r\n//   // console.log(copyText);\r\n//   copyText[0].select();\r\n//   copyText.setSelectionRange(0, 99999); /*For mobile devices*/\r\n\r\n//   /* Copy the text inside the text field */\r\n//   document.execCommand(\"copy\");\r\n\r\n//   /* Alert the copied text */\r\n//   alert(\"Copied the text: \" + copyText.value);\r\n// }\r\n\r\ncopyCodeToClipboard = () => {\r\n  const el = this.textArea\r\n  el.select()\r\n  document.execCommand(\"copy\")\r\n}\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalID);\r\n  }\r\n\r\n  //this only works if you let it do the interval thing\r\n  getPlayers = () => {\r\n    //this shows undefined\r\n    if (this.props.gameId) {\r\n      console.log(`This.props.gameId is: ${this.props.gameId}`);\r\n      // axios.get(`http://localhost:4000/games/${this.props.gameId}/players`)\r\n      axios.get(`api/players/${this.props.gameId}/player`)\r\n        // .then(game => this.setState({ gameInfo: game.data[0].players }));\r\n        .then(game => this.updateAllTheThings(game));\r\n        // .then(game => this.setState({\r\n        //   gameInfo: game.data[0].players,\r\n        //   gameStarted: game.data[0].gameStarted,\r\n        //   // removablePlayers: game.data[0].removablePlayers\r\n        // }));\r\n        // console.log(this.state.gameInfo);\r\n        // this.props.updateAllPlayers(this.state.gameInfo);\r\n        // this.props.updateRemovablePlayers();\r\n        // this.props.updateRemovablePlayers();\r\n    }\r\n  }\r\n\r\n  updateAllTheThings = (game) => {\r\n    this.props.updateAllPlayers(game.data[0].players);\r\n    this.props.updateRemovablePlayers();\r\n    this.setState({ gameStarted: game.data[0].gameStarted });\r\n  }\r\n\r\n  // beginGame = (e) => {\r\n  //   this.props.updateRemovablePlayers();\r\n  //   // e.preventDefault();\r\n  //   console.log(\"begin game functionality will go here\");\r\n  //   //do a put request to server to begin game\r\n  //   let gameStatus = {\r\n  //     gameStatus: true\r\n  //   }\r\n  //   axios.put(`api/games/${this.props.gameId}/startGame`, gameStatus)\r\n  // }\r\n\r\n//   copyToClipboard = (e) => {\r\n//   this.textArea.select();\r\n//   document.execCommand('copy');\r\n//   // This is just personal preference.\r\n//   // I prefer to not show the whole text area selected.\r\n//   e.target.focus();\r\n//   this.setState({ copySuccess: ' Copied!' });\r\n// };\r\n\r\n// copyCodeToClipboard = () => {\r\n//   const el = this.textArea\r\n//   el.select()\r\n//   document.execCommand(\"copy\")\r\n//   this.setState({copySuccess: true})\r\n// }\r\n\r\n  render() {\r\n    let players = this.props.allPlayers;\r\n    let playerBoard = [];\r\n    for (let i = 0; i < players.length; i++) {\r\n      playerBoard.push(players[i].name);\r\n    }\r\n    // if (playerBoard.length < 1) {\r\n    //   playerBoard = \"Loading players...\";\r\n    // }\r\n    return (\r\n      <div>\r\n      \r\n      {this.props.playerNumber === false ? (\r\n        <div>\r\n          It looks like the game you're trying to join has already started.\r\n          <div>\r\n            <button class=\"btn btn-success\">\r\n              <Link to='/'>Go Home</Link>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n        {!this.state.gameStarted ? (\r\n          <div className=\"first\">\r\n            <h1>The Waiting Room</h1>\r\n    \r\n            <form>\r\n              <div className=\"form-group\" controlId=\"exampleForm.ControlTextarea1\">\r\n                <p></p>\r\n                  <h4>Send this invite link to friends</h4>\r\n                  <textarea className=\"form-control\" value={this.props.gameIdUrl} ref={(textarea) => this.textArea = textarea}/>\r\n              </div>\r\n            </form>\r\n            \r\n            <CopyToClipboard text={this.props.gameIdUrl}\r\n              onCopy={() => this.setState({copied: true, copySuccess: \"Link copied!\"})}>\r\n              <Button variant=\"warning\">Copy Link</Button>\r\n            </CopyToClipboard>\r\n            <p>\r\n            </p>{this.state.copySuccess}\r\n    \r\n            <p></p><h2>Who's Joined:</h2>\r\n            {this.props.allPlayers !== [{name: \"Loading Players\", _id: \"Test ID\"}] && this.props.allPlayers !== null ? (\r\n              <div>\r\n                {playerBoard.map((item) => {\r\n                  return(\r\n                    <div>\r\n                      {item}\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n            ) : (\r\n              <div>No one's joined yet </div>\r\n            )}\r\n            </div>\r\n          ) : (\r\n            <div>\r\n            </div>\r\n          )}\r\n    \r\n          {!this.state.gameStarted && !this.props.isHost ? (\r\n            <div>\r\n              <p></p>\r\n              <em>Waiting for host to start game ...</em>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n            </div>\r\n          )}\r\n    \r\n          {this.state.gameStarted && !this.props.isHost ? (\r\n            <div>\r\n            <p>The host has started the game!</p>\r\n              <Link to='/writing'>\r\n                <Button variant=\"success\">Begin Writing</Button>\r\n              </Link>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n            </div>\r\n          )}\r\n\r\n          {!this.state.gameStarted && this.props.isHost && this.props.allPlayers.length <= 1 ? (\r\n            <div>\r\n            <p></p>\r\n              <Link to='/writing'>\r\n                <Button variant=\"primary\" disabled>Start Game for Everyone</Button>\r\n              </Link>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n            </div>\r\n          )}\r\n    \r\n          {!this.state.gameStarted && this.props.isHost && this.props.allPlayers.length > 1 ? (\r\n            <div>\r\n            <p></p>\r\n              <Link to='/writing'>\r\n                <Button variant=\"primary\" onClick={this.props.startGame}>Start Game for Everyone</Button>\r\n              </Link>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default WaitScreen;\r\n","import React, { Component } from 'react';\r\nimport Picker from 'emoji-picker-react';\r\n \r\nclass Avatars extends Component {\r\n\r\n  selectEmoji = (code, data) => {\r\n    console.log(code);\r\n    console.log(data);\r\n    console.log(data.emoji);\r\n    this.props.updateAvatar(data.emoji);\r\n  }\r\n\r\n    render() {\r\n        return (\r\n            <Picker onEmojiClick={this.selectEmoji}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Avatars;\r\n\r\n\r\n// original thing i used\r\n// import React, {Component} from 'react';\r\n// import Picker from 'emoji-picker-react';\r\n\r\n// class Avatars extends Component {\r\n\r\n//   selectEmoji = (code, data) => {\r\n//     console.log(code);\r\n//     console.log(data);\r\n//     console.log(data.emoji);\r\n//     this.props.updateAvatar(data.emoji);\r\n//   }\r\n\r\n//     render() {\r\n//         return (\r\n//             <Picker onEmojiClick={this.selectEmoji}/>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export default Avatars;\r\n\r\n\r\n\r\n//2nd ONE I DID\r\n// import React, { useState } from 'react';\r\n// import Picker from 'emoji-picker-react';\r\n\r\n// const Avatars = (props) => {\r\n//   const [chosenEmoji] = useState(null);\r\n\r\n//   return (\r\n//     <div>\r\n//       {chosenEmoji ? (\r\n//         <span>You chose: {chosenEmoji.emoji}</span>\r\n//       ) : (\r\n//         <span>No emoji Chosen</span>\r\n//       )}\r\n//       <Picker onEmojiClick={props.updateAvatar} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n\r\n// const Avatars = (props) => {\r\n//   const [chosenEmoji, setChosenEmoji] = useState(null);\r\n \r\n//   // const onEmojiClick = (event, emojiObject) => {\r\n//   //   setChosenEmoji(emojiObject);\r\n//   // };\r\n\r\n//   const selectEmoji = (code, data) => {\r\n//     //     console.log(code);\r\n//     //     console.log(data);\r\n//     //     console.log(data.emoji);\r\n//         props.updateAvatar(data.emoji);\r\n//       }\r\n \r\n//   return (\r\n//     <div>\r\n//       {chosenEmoji ? (\r\n//         <span>You chose: {chosenEmoji.emoji}</span>\r\n//       ) : (\r\n//         <span>No emoji Chosen</span>\r\n//       )}\r\n//       <Picker onEmojiClick={this.selectEmoji} />\r\n//     </div>\r\n//   );\r\n// };","import React from 'react';\r\n\r\nimport Avatars from '../welcomescreen/Avatars.js';\r\nimport { Button, Form, Alert } from 'react-bootstrap';\r\nimport { BrowserRouter as Route, Link } from \"react-router-dom\";\r\n\r\nimport axios from 'axios';\r\n\r\nclass Join extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      code: null,\r\n      playerName: null,\r\n      playerAvatar: null,\r\n      playerSubmitted: false,\r\n      gameHasStarted: null,\r\n      doesGameExist: true\r\n    }\r\n  }\r\n\r\n  // updateName = (e) => {\r\n  //   this.setState({ playerName: e.target.value });\r\n  // }\r\n  //\r\n  // updateAvatar = (e) => {\r\n  //   this.setState({ playerAvatar: e.target.value });\r\n  // }\r\n\r\n  // updateCode = (e) => {\r\n  //   this.setState({ gameCode: e.target.value });\r\n  // }\r\n\r\n  // putPlayer = (e) => {\r\n  //   //don't submit information twice\r\n  //   if (this.state.playerSubmitted) {\r\n  //     return;\r\n  //   }\r\n  //   // e.preventDefault();\r\n  //   let player = {\r\n  //     name: this.props.playerName + \" \" + this.props.playerAvatar,\r\n  //     avatar: this.props.playerAvatar\r\n  //   }\r\n  //   console.log(player);\r\n  //   console.log(`the gameid in putPlayer is: ${this.props.gameId}`);\r\n  //   axios.put(`api/players/${this.props.gameId}`, player)\r\n  //   .then(res => this.props.updatePlayerNumber(res.data.playerNumber))\r\n  //   .then(this.setState({ playerSubmitted: true }));\r\n\r\n\r\n\r\n  // //   .then(console.log(\"we found the game!\"));\r\n  // // this.props.updatePlayerNumber(playerNumber);\r\n\r\n  //   // Add in something that takes the student number and puts it into the players state\r\n  // }\r\n\r\n  updateState = () => {\r\n    this.props.removeHostStatus();\r\n    this.props.removePreviousFinalStory();\r\n    this.props.resetPlayerChoseAvatar();\r\n    this.props.resetPlayerToDelete();\r\n    this.props.resetRounds();\r\n    this.props.resetPlayerName();\r\n    this.props.resetPlayerId();\r\n    this.props.resetAppLevelRound();\r\n    this.props.resetHasFinalStory();\r\n    this.props.resetRemovablePlayers();\r\n    this.props.resetAllPlayers();\r\n  }\r\n\r\n  putPlayer = (e) => {\r\n    //don't submit information twice\r\n    if (this.state.playerSubmitted) {\r\n      return;\r\n    }\r\n    // e.preventDefault();\r\n    let player = {\r\n      name: this.props.playerName + \" \" + this.props.playerAvatar,\r\n      avatar: this.props.playerAvatar\r\n    }\r\n    // console.log(player);\r\n    // console.log(`the gameid in putPlayer is: ${this.props.gameId}`);\r\n    axios.put(`api/players/${this.props.gameId}`, player)\r\n    .then((res) => {\r\n      this.props.updatePlayerNumber(res.data.playerNumber);\r\n      this.props.updatePlayerId(res.data.playerId);\r\n    });\r\n  }\r\n\r\n  // updatePlayerNumber = () => {\r\n  //   console.log(\"hey\");\r\n  // }\r\n\r\n  // updatePlayerId = () => {\r\n  //   console.log(\"hey again\");\r\n  // }\r\n\r\n  getCodeFromURL = () => {\r\n    if (this.props.gameId !== \"\" && this.props.gameId !== null) { //recently added lines of code\r\n      // console.log(\"there's already a gameId, so you probably came here from the homepage\");\r\n      this.grabGameInfo(this.props.gameId);\r\n      return;\r\n    }\r\n    const URL = window.location.href;\r\n    const lengthOfURL = URL.length;\r\n    let gameId = \"\";\r\n    for (let i = 0; i < lengthOfURL; i++) {\r\n      if (URL[i] === '?') {\r\n        //leave loop\r\n      }\r\n      //add something about join\r\n      else {\r\n        gameId = gameId + URL[i];\r\n      }\r\n      if (gameId === \"http://\") {\r\n        gameId = \"\";\r\n      }\r\n      else if (gameId === \"secret-wildwood-99621.herokuapp.com\") {\r\n        gameId = \"\";\r\n      }\r\n      else if (gameId === \"localhost:3000\") {\r\n        gameId = \"\";\r\n      }\r\n      else if (gameId === \"join\") {\r\n        gameId = \"\";\r\n      }\r\n      else if (gameId === \"/\") {\r\n        gameId = \"\";\r\n      }\r\n      else {\r\n        //nothing\r\n      }\r\n    }\r\n    gameId = gameId.toUpperCase();\r\n    if (gameId.length > 4) {\r\n      gameId = gameId.slice(0, 4);\r\n    }\r\n    let gameIdUrl = `secret-wildwood-99621.herokuapp.com/join/${gameId}`;\r\n    this.props.updateGameIdUrl(gameIdUrl);\r\n    // console.log(gameId);\r\n    // Check server for game - need to add error functionality to this\r\n    this.props.updateGameId(gameId);\r\n    this.grabGameInfo(gameId);\r\n  }\r\n\r\n  grabGameInfo = (gameId) => {\r\n    // console.log(`the game id is ${gameId}`);\r\n    axios.get(`/join/api/${gameId}`)\r\n      //this should have an if statement. how do we do those?\r\n      // .then(res => console.log((res.data[0].rounds)));\r\n      .then((res) => {\r\n        console.log(`the data from the backend is ${res.data}`);\r\n        console.log(`the data from the backend is ${res.data[0]}`);\r\n        console.log(`the data from the backend is ${res.data[0].rounds}`);\r\n        console.log(`the data from the backend is ${res.data[0].gameStarted}`);\r\n        console.log(`the data from the backend is ${res.data[0].doesGameExist}`);\r\n        this.props.howManyRounds(res.data[0].rounds);\r\n        this.hasGameStarted(res.data[0].gameStarted);\r\n        this.doesGameExist(res.data[0].doesGameExist);\r\n      });\r\n  }\r\n\r\n  componentDidMount() { \r\n    this.updateState(); //switched order of these 2\r\n    this.getCodeFromURL();\r\n  }\r\n\r\n  doesGameExist = (doesGameExist) => {\r\n    if (doesGameExist === false) {\r\n      this.setState({ doesGameExist: false });\r\n    }\r\n  }\r\n\r\n  hasGameStarted = (hasStarted) => {\r\n    if (hasStarted === true) {\r\n      this.setState({ gameHasStarted: true });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div>\r\n\r\n    {this.state.gameHasStarted || !this.state.doesGameExist ? (\r\n        <div>\r\n          Oops! Either this game has already started, or it doesn't exist.\r\n          <p></p>\r\n          <p>\r\n            <Link to='/'>\r\n              <Button\r\n                variant=\"success\">\r\n                Return Home\r\n              </Button>\r\n            </Link>\r\n          </p>\r\n        </div>\r\n    ) : (\r\n\r\n      <div>\r\n\r\n      <h2> About to join game {this.props.gameId} </h2>\r\n\r\n    <Form>\r\n      <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n        <Form.Label>Name</Form.Label>\r\n        <Form.Control type=\"name\" placeholder=\"Enter name\" onChange={this.props.updateName}/>\r\n      </Form.Group>\r\n      <Form.Group controlId=\"emoji selector\">\r\n            <Form.Label>Select emoji as your avatar</Form.Label>\r\n              <Avatars\r\n              updateAvatar = {this.props.updateAvatar} \r\n              />\r\n          </Form.Group>\r\n        </Form>\r\n\r\n    \r\n\r\n    {this.props.playerChoseAvatar ? (\r\n    <Alert variant=\"primary\" transition=\"fade\">\r\n      {this.props.playerAvatar} selected\r\n    </Alert>\r\n    ) : (\r\n      <div>\r\n      </div>\r\n    )}\r\n\r\n\r\n      {!this.props.playerName || !this.props.playerAvatar ? (\r\n        <Button variant=\"success\" disabled>Join Game</Button>\r\n        ) : (\r\n        <div>\r\n          <Link to='/waitscreen'>\r\n            <Button\r\n              variant=\"success\"\r\n              onClick={this.putPlayer}>\r\n              Join Game\r\n            </Button>\r\n          </Link>\r\n        </div>\r\n        )\r\n      }\r\n      </div>\r\n\r\n\r\n\r\n\r\n\r\n    )\r\n  \r\n  }\r\n    </div>;\r\n\r\n\r\n\r\n\r\n  }\r\n}\r\n\r\nexport default Join;\r\n","import React from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Button } from 'react-bootstrap';\r\n\r\nimport \"./storyrevealed.css\";\r\n\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\n\r\nclass Storyrevealed extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      //state here\r\n      copySuccess: '',\r\n      copied: false\r\n    }\r\n  }\r\n\r\n  render() {\r\n    //variables, logic and so on here\r\n      return (\r\n        <div>\r\n          <h1>{this.props.playerName}'s Story</h1>\r\n          <p>{this.props.finalStory}</p>\r\n          <CopyToClipboard text={this.props.finalStory}\r\n            onCopy={() => this.setState({copied: true, copySuccess: \"Story copied!\"})}>\r\n            <Button variant=\"warning\">Copy Story</Button>\r\n          </CopyToClipboard>\r\n        <p></p> {this.state.copySuccess} <p></p>\r\n          <button class=\"btn btn-success\">\r\n            <Link to='/'>Play Again</Link>\r\n          </button>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default Storyrevealed;\r\n","import React, { useState } from 'react';\r\n\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nfunction HelpModal() {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"secondary\" onClick={handleShow}>\r\n        Help\r\n      </Button>\r\n\r\n      <Modal show={show} onHide={handleClose} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Help Section</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <p>This is the Story Game.\r\n        Together, you and your friends will write hilarious stories.</p>\r\n        <p>Write a few lines of a story, then send it on to a friend.\r\n        The catch is that your friends will only be able to see the last few words of the story you've written.</p>\r\n        <p>Enter your name, select an avatar, and choose the number of rounds before starting.</p>\r\n        <p>If you're a beginner, start with 3 rounds.</p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HelpModal;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\n// import { BrowserRouter as Router, Link } from \"react-router-dom\";\r\nimport { Button, Form, Alert } from 'react-bootstrap';\r\nimport { BrowserRouter as Route, Link } from \"react-router-dom\";\r\n\r\nimport HelpModal from './HelpModal.js';\r\nimport Avatars from './Avatars.js';\r\n// import JSEMOJI from 'emoji-js';\r\n\r\nclass HomeScreen extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      playerName: null,\r\n      playerAvatar: \"Avatar 1\",\r\n      rounds: 3,\r\n      gameIdUrl: null,\r\n      test: null,\r\n      playerSubmitted: false\r\n    }\r\n  }\r\n\r\n  updateState = () => {\r\n    this.props.removePreviousFinalStory();\r\n    this.props.resetPlayerChoseAvatar();\r\n    this.props.resetPlayerToDelete();\r\n    this.props.resetRounds();\r\n    this.props.resetPlayerName();\r\n    this.props.resetPlayerId();\r\n    this.props.updateHost();\r\n    this.props.resetAppLevelRound();\r\n    this.props.resetHasFinalStory();\r\n    this.props.resetRemovablePlayers();\r\n    this.props.resetAllPlayers();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateState();\r\n    this.gameURLGenerator();\r\n  }\r\n\r\n  updateName = (e) => {\r\n    this.setState({ playerName: e.target.value });\r\n  }\r\n\r\n  updateAvatar = (e) => {\r\n    this.setState({ playerAvatar: e.target.value });\r\n  }\r\n\r\n  updateRounds = (e) => {\r\n    this.setState({ rounds: e.target.value });\r\n  }\r\n\r\n  deleteDefaultText = (e) => {\r\n    // console.log(\"hey\");\r\n    if (e.target.value === \"Enter 4-letter game code\") {\r\n      e.target.value = \"\";\r\n    }\r\n  }\r\n\r\n  updateGameIdValue = (e) => {\r\n    let gameId = e.target.value.toUpperCase();\r\n    this.props.updateGameId(gameId);\r\n    this.props.updateGameIdUrl(`secret-wildwood-99621.herokuapp.com/join/${gameId}`);\r\n  }\r\n\r\n  gameURLGenerator = () => {\r\n    // this.props.updateHost(); //okay maybe this wasnt actually needed\r\n    // console.log('hey');\r\n    var result = '';\r\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    var charactersLength = characters.length;\r\n    for ( var i = 0; i < 4; i++ ) {\r\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    let gameIdUrl = `secret-wildwood-99621.herokuapp.com/join/${result}`;\r\n    \r\n    // let gameIdUrl = `secret-wildwood-99621.herokuapp.com/join/${result}`;\r\n\r\n    // this.setState({ gameIdUrl: gameIdUrl });\r\n    // this.setState({ gameId: result });\r\n    this.props.updateGameId(result);\r\n    this.props.updateGameIdUrl(gameIdUrl);\r\n    // write a post request here\r\n    let newGame = {\r\n        code: result\r\n    };\r\n    // console.log(\"about to post a new game\");\r\n    // console.log(`the new game code is ${newGame.code}`);\r\n    // axios.post('/add', newGame)\r\n    // axios.post('http://localhost:4000/games/add', newGame)\r\n    axios.post('/api/games/add', newGame)\r\n        .then(res => console.log(res.data));\r\n  }\r\n\r\n  createGame = (e) => {\r\n    if (this.state.playerSubmitted) {\r\n      return;\r\n    }\r\n    // e.preventDefault();\r\n    this.props.updateHost();\r\n    let newGameInfo = {\r\n        code: this.props.gameId,\r\n        rounds: this.props.rounds,\r\n        players: {\r\n          name: this.props.playerName + \" \" + this.props.playerAvatar,\r\n          number: 0,\r\n          avatar: this.props.playerAvatar,\r\n        }\r\n    };\r\n    // console.log(newGameInfo);\r\n    axios.put('api/players/add/:code', newGameInfo)\r\n    // axios.put('/add/:code', newGameInfo)\r\n        .then(res => this.props.updatePlayerId(res.data.playerId));\r\n        this.props.updatePlayerNumber(0);\r\n        this.setState({ playerSubmitted: true });\r\n  }\r\n\r\n\r\n  render() {\r\n      return (\r\n        <div>\r\n        <h1>Create a <b>Story Game</b> Private Party</h1>\r\n        <hr />\r\n        <Form>\r\n          <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n            <Form.Label>Your name</Form.Label>\r\n            <Form.Control type=\"name\" placeholder=\"Enter name\" onChange={this.props.updateName}/>\r\n          </Form.Group>\r\n          <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n            <Form.Label>Number of rounds</Form.Label>\r\n            <Form.Control as=\"select\" onClick={this.props.hostSetsRoundNumber}>\r\n              <option>3</option>\r\n              <option>5</option>\r\n              <option>7</option>\r\n              <option>9</option>\r\n            </Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"emoji selector\">\r\n            <Form.Label>Select an emoji to represent you</Form.Label>\r\n              <Avatars\r\n              updateAvatar = {this.props.updateAvatar} \r\n              />\r\n          </Form.Group>\r\n        </Form>\r\n\r\n        {this.props.playerChoseAvatar ? (\r\n          <Alert variant=\"primary\" transition=\"fade\">\r\n            {this.props.playerAvatar} selected\r\n          </Alert>\r\n          ) : (\r\n            <div>\r\n            </div>\r\n          )\r\n        }\r\n\r\n            {!this.props.playerName ||\r\n              !this.props.playerAvatar ||\r\n              !this.props.rounds ? (\r\n                <Button variant=\"success\" disabled>Create Game</Button>\r\n              ) : (\r\n              <div>\r\n                <Link to='/waitscreen'>\r\n                  <Button variant=\"success\" onClick={this.createGame}>Create Game</Button>\r\n                </Link>\r\n              </div>\r\n              )\r\n            }\r\n          <p>\r\n          </p>\r\n          <hr />\r\n          <p>\r\n            <HelpModal />\r\n          </p>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default HomeScreen;\r\n\r\n\r\n{/* <hr />\r\n          <h2>Joining a Game?</h2>\r\n          <div className=\"form-group\" controlId=\"exampleForm.ControlTextarea1\">\r\n                <p></p>\r\n                  <textarea className=\"form-control\" defaultValue=\"Enter 4-letter game code\" onClick={this.deleteDefaultText} onChange={this.updateGameIdValue} ref={(textarea) => this.textArea = textarea}/>\r\n            </div>\r\n          <button class=\"btn btn-success\">\r\n            <Link to='/join'>Join</Link>\r\n          </button>\r\n          <p></p> */}","import React, { useState } from 'react';\r\n\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nfunction HelpModal() {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"secondary\" onClick={handleShow}>\r\n        Help\r\n      </Button>\r\n\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Help Section</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>Write until the progress bar is filled. Then, submit your story. You can't write more than 150 characters.</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HelpModal;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\n\r\nfunction RemovePlayerModal(props) {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  \r\n  const handleShow = () => setShow(true);\r\n\r\n  // let counter = 0;\r\n  // Similar to componentDidMount and componentDidUpdate:\r\n  useEffect(() => {\r\n    // console.log(\"heeey\");\r\n    if (props.allPlayers.length < 3) {\r\n      return;\r\n    }\r\n    if (props.allPlayers[props.allPlayers.length - 1] !== props.removablePlayers[props.removablePlayers.length - 1]) {\r\n      props.updateRemovablePlayers();\r\n      // counter = counter + 3;\r\n    }\r\n  });\r\n\r\n  if (props.allPlayers.length > 2) {\r\n  return (\r\n    <>\r\n\r\n      <Button variant=\"danger\" onClick={handleShow}>\r\n        Remove Player\r\n      </Button>\r\n\r\n      <Modal show={show} onHide={handleClose} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Remove a player</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n\r\n    <Form>\r\n    <fieldset>\r\n      <Form.Group>\r\n        <Form.Label>Which player would you like to remove from the game?</Form.Label>\r\n    \r\n            \r\n            {props.removablePlayers.map(player => { // using props in child component and looping\r\n                return (\r\n                    <>\r\n                    <h4>\r\n                        {player.name}\r\n                        \r\n                        <Form.Check type=\"radio\" label=\"\" name=\"deleteMe\" onClick={(e) => props.updatePlayerToDelete(e, player.number)} id={player._id} funtime={player.number} />\r\n                      \r\n                    \r\n                    </h4>\r\n                    </>\r\n                )\r\n            })}\r\n                \r\n            </Form.Group>\r\n            </fieldset>  \r\n            </Form>\r\n            </Modal.Body>\r\n        <Modal.Footer>\r\n        <Button variant=\"danger\" onClick={props.removePlayer}>\r\n            Remove selected player\r\n          </Button>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  )}\r\n  else {\r\n    return (\r\n      <Button variant=\"danger\" onClick={handleShow} disabled>\r\n        <em>Remove Player</em>\r\n      </Button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default RemovePlayerModal;\r\n\r\n\r\n\r\n\r\n\r\n                //what i had there previously:\r\n                // option onSelect={(e) => props.updatePlayerToDelete(e, player.number)}\r\n\r\n\r\n\r\n    //             <Form.Label>Which player would you like to remove from the game?</Form.Label>\r\n    // <Form.Control as=\"select\">\r\n    //     {props.removablePlayers.map(player => { // using props in child component and looping\r\n    //             return (\r\n    //               <>\r\n    //                 <option onSelect={console.log(\"i've been selected!\")} id={player._id} funtime={player.number}>{player.name}</option>\r\n    //               </>\r\n    //             )\r\n    //         }\r\n    //     )}\r\n\r\n\r\n    // const handleClose = () => \r\n  //   setShow(false);\r\n  //   if (props.playerToDelete !== null) {\r\n  //     props.updatePlayerToDelete();\r\n  //   }","import React from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { ProgressBar, Button } from 'react-bootstrap';\r\n// import Progress from 'semantic-ui-react';\r\nimport HelpModal from './HelpModal.js';\r\nimport RemovePlayerModal from './RemovePlayerModal.js';\r\n\r\nclass Writingpaper extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      charactersAllowed: 150,\r\n      charactersUsed: 0,\r\n      charactersLeft: 150,\r\n      currentRound: 1,\r\n      minimimumCharactersRequired: 135,\r\n      story: \"\",\r\n      roundForAppUpdate: 1,\r\n      submitStory: false,\r\n      storySubmitted: false,\r\n      endGame: false,\r\n      isLastRound: false,\r\n      makeLastRound: false,\r\n      needHelp: false,\r\n      everyoneHasSubmitted: false,\r\n      previousPersonsWriting: \"Example\",\r\n      previousPerson: \"[Name of Previous Person Here]\",\r\n      avatarOfPreviousPerson: \"[Avatar of Previous Person Here]\",\r\n      nudgeText: \"Begin your story here\",\r\n      playersStillWorking: \"Submitting story...\",\r\n      snarkyWaitingLine: \"Penning a masterpiece, I'm sure.\",\r\n      showSnarkyWaitingLine: false,\r\n      newPlayerNumber: null\r\n      // showRemovePlayerModal: false\r\n    }\r\n  }\r\n\r\n  snarkyWaitingLines = [\r\n    \"Probably penning a masterpiece.\",\r\n    \"Slow but steady wins the race. Not this time, though.\",\r\n    \"They say the best writers take the longest.\",\r\n    \"I'm sure they're writing something really good.\",\r\n    \"The turtle eventually beat the hare, you know.\",\r\n    \"They must be writing something really good.\",\r\n    \"How awesome is their story going to be?\",\r\n    \"Maybe given them a friendly push?\",\r\n    \"Last to submit, but first in our hearts.\",\r\n    \"They say great writers take their time.\",\r\n    \"Some writers are slower. Not Danielle Steel, though.\",\r\n    \"Kindly do not distract them.\",\r\n    \"If you poke them, they might take even longer.\",\r\n    \"Truly the best of us.\",\r\n    \"They must be writing something so funny.\",\r\n    \"But for how much longer?\",\r\n    \"Tick tock, tick tock.\",\r\n    \"*Insert Jeopardy theme here.*\",\r\n    \"It's okay, we're in no rush.\",\r\n    \"They say great things come to those who wait.\",\r\n    \"Bless their heart.\",\r\n    \"Have you ever asked them their pronouns?\",\r\n    \"What's your favorite thing about them?\",\r\n    \"Are they on a Windows phone?\",\r\n    \"Maybe they type slower than the rest of us.\",\r\n    \"That doesn't make them a bad person, though.\",\r\n    \"I bet they're perfecting their story before submitting.\",\r\n    \"Gently tease them, please.\",\r\n    \"I'm sure they've got something great so far.\",\r\n    \"Are they usually late to things?\",\r\n    \"Maybe we should call them Godot.\",\r\n    \"Call us restaurant servers. Because we're all waiting.\",\r\n    \"Time for impatient toe tapping.\",\r\n    \"Maybe it's their first time doing this.\",\r\n    \"Probably writing something obscene.\",\r\n    \"*Drumming fingers.*\",\r\n    \"Don't tell them they're holding up the whole game.\",\r\n    \"Be nice about how slow they are.\",\r\n    \"Some may say they're slow, we say methodical.\",\r\n    \"Genius doesn't come quick.\",\r\n    \"But we'll let you know when they're done.\",\r\n    \"They're a really great person, don't you think?\",\r\n    \"No problem. We'll wait ...\",\r\n    \"Maybe they have a slow connection.\",\r\n    \"We'd say something snarky, but they're just so darn nice.\"\r\n    ]\r\n\r\n  intervalID;\r\n\r\n  componentDidMount() {\r\n    // this.getPlayers();\r\n    // this.props.updateRemovablePlayers(this.props.allPlayers);\r\n    this.hasEveryoneSubmitted();\r\n    this.updateSnarkyWaitingLine();\r\n    // this.props.updateRemovablePlayers(this.props.allPlayers, true);\r\n    // pausing for now so it stops fetching lol\r\n    this.intervalID = setInterval(this.hasEveryoneSubmitted.bind(this), 3000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalID);\r\n  }\r\n\r\n  getPlayers = () => {\r\n    // console.log(this.props.gameId);\r\n    axios.get(`api/players/${this.props.gameId}/player`)\r\n      .then(game => this.props.updateAllPlayers(game.data[0].players)); \r\n  }\r\n\r\n  hasEveryoneSubmitted = () => {\r\n    // this.props.updateRoundNumber(this.state.roundForAppUpdate);\r\n    //make a get request to fetch the current round and update it\r\n    // only enter this loop if you have submitted your story and you do NOT have your final story\r\n    if (this.state.storySubmitted && !this.props.hasFinalStory) {\r\n    // list what this should do\r\n    let info1 = {\r\n      round: this.state.currentRound\r\n    }\r\n    // console.log(`this.state.currentRound is ${this.state.currentRound}`);\r\n    axios.get(`api/stories/storiesSubmitted/${this.props.gameId}/${this.state.currentRound}`, info1)\r\n      .then(res => this.setState({\r\n        everyoneHasSubmitted: res.data.everyoneHasSubmitted,\r\n        playersStillWorking: res.data.playersStillWorking,\r\n        newPlayerNumber: res.data.newNumber,\r\n        showSnarkyWaitingLine: res.data.showSnarkyWaitingLine\r\n       }));\r\n       if (this.state.newPlayerNumber !== null) {\r\n        this.props.updatePlayerNumber(this.state.newPlayerNumber); //this might have some state issues\r\n      }\r\n\r\n      //if it's the last round and everyone's submitted, get your final story\r\n    if (this.state.isLastRound && this.state.everyoneHasSubmitted) {\r\n      let info2 = {\r\n        code: this.props.gameId,\r\n        playerNumber: this.props.playerNumber,\r\n        round: this.props.appLevelRound\r\n      }\r\n      axios.put(`api/stories/${this.props.gameId}/${this.props.playerNumber}/finalStory`, info2) //maybe put round number as params?\r\n        .then(res => this.props.updateFinalStory(res.data))\r\n        .then(this.props.updateHasFinalStory())\r\n        .then(this.setState({ storySubmitted: true })); //might not need this part due to logic in render. test?\r\n    }\r\n    // axios.get(`api/stories/storiesSubmitted/${this.props.gameId}/${this.state.currentRound}`, info1)\r\n    //   .then(res => this.setState({\r\n    //     everyoneHasSubmitted: res.data.everyoneHasSubmitted,\r\n    //     playersStillWorking: res.data.playersStillWorking,\r\n    //     newPlayerNumber: res.data.newNumber\r\n    //    }));\r\n    //    if (this.state.newPlayerNumber !== null) {\r\n    //      this.props.updatePlayerNumber(this.state.newPlayerNumber);\r\n    //    }\r\n\r\n    //if everyone has submitted and you don't have any writing and it's not the last round, go for story\r\n    if (this.state.everyoneHasSubmitted && this.state.previousPersonsWriting === \"Example\" && !this.state.isLastRound) {\r\n      // console.log(\"do the request for the story that is rightfully yours\");\r\n      let info3 = {\r\n        code: this.props.gameId,\r\n        newPlayerNumber: this.state.newPlayerNumber\r\n      }\r\n      axios.get(`api/stories/grabNewStory/${this.props.gameId}/${this.props.playerNumber}/${this.props.appLevelRound}`, info3)\r\n        .then(res => this.setState({\r\n          previousPersonsWriting: res.data.story, //only change stuff below IF this is equal to something?\r\n          previousPerson: res.data.player,\r\n          storySubmitted: false,\r\n          everyoneHasSubmitted: false,\r\n          currentRound: res.data.round + 1,\r\n          isLastRound: res.data.isLastRound,\r\n          showSnarkyWaitingLine: false\r\n        })\r\n      );\r\n      this.props.updateAppLevelRound();\r\n      if (this.props.rounds - this.state.currentRound === 0) {\r\n        this.setState({ nudgeText: \"Finish the story here\" })\r\n      }\r\n      if (this.props.isHost) {\r\n        axios.put(`api/games/updateRound/${this.props.gameId}`);\r\n      }\r\n      this.updateSnarkyWaitingLine();\r\n      }\r\n    }\r\n  // if you haven't submitted your story, or you have your final story, exit the loop\r\n  else {\r\n    return;\r\n  }\r\n}\r\n\r\n  updateStory = (e) => {\r\n    //put the story into state so submit button can send it on\r\n    this.setState({ story: e.target.value });\r\n    this.setState({ charactersLeft: (this.state.charactersAllowed - e.target.value.length) });\r\n    this.setState({ charactersUsed: e.target.value.length })\r\n  };\r\n\r\n  //This function sends the writing to the backend\r\n  //First, we'll try to send it to that player. Eventually, it will go to the player who originally wrote it\r\n  putWriting = (e) => {\r\n    // e.preventDefault();\r\n    this.setState({ playersStillWorking: \"Submitting story...\" });\r\n    // console.log(\"and here we are\");\r\n    let playerStory = {\r\n      code: this.props.gameId,\r\n      story: this.state.story,\r\n      appRound: this.props.appLevelRound,\r\n      round: this.state.currentRound\r\n    }\r\n    axios.post(`api/stories/write/${this.props.gameId}/${this.state.currentRound}/${this.props.playerNumber}/${this.state.story}`, playerStory) //switched this from this.props.appLevelRound\r\n      .then(res => this.postSubmissionUpdate(res.data.success));\r\n  }\r\n\r\n  postSubmissionUpdate = (success) => {\r\n    if (success === false) {\r\n      this.putWriting();\r\n      return; //not sure if this return is needed or not\r\n    }\r\n    else {\r\n      this.setState({\r\n        charactersUsed: 0,\r\n        charactersLeft: 150,\r\n        story: \"Write your story here\",\r\n        storySubmitted: true,\r\n        previousPersonsWriting: \"Example\",\r\n        submitStory: false,\r\n        nudgeText: \"Continue the story here\"\r\n       });\r\n    }\r\n  }\r\n\r\n  deleteDefaultText = (e) => {\r\n    if (e.target.value === \"Begin your story here\" || e.target.value === \"Continue the story here\" || e.target.value === \"Finish the story here\") {\r\n      e.target.value = \"\";\r\n    }\r\n    this.setState({ everyoneHasSubmitted: false });\r\n  }\r\n\r\n  tryToSubmit = (e) => {\r\n    // console.log(\"try to submit\");\r\n    this.setState({ submitStory: true });\r\n  }\r\n\r\n  neverMind = (e) => {\r\n    this.setState({ submitStory: false });\r\n  }\r\n\r\n  quitGame = () => {\r\n    // console.log(\"They're ready to quit!\");\r\n  }\r\n\r\n  updateSnarkyWaitingLine = () => {\r\n    // console.log(\"we're inside updateSnarkyWaitingLine\");\r\n    let newSnarkyLine = this.snarkyWaitingLines[Math.floor(Math.random() * (this.snarkyWaitingLines.length - 1))];\r\n    this.setState({ snarkyWaitingLine: newSnarkyLine });\r\n  }\r\n\r\n  // RemovePlayerModal = (props) => {\r\n  //   return (\r\n  //     <Modal />\r\n  //     <div>{{allPlayers: props.allPlayers}}</div>\r\n  //   )\r\n  // }\r\n\r\n  // const Child = (props) => {\r\n  //   return (\r\n  //     <div style={{backgroundColor: props.eyeColor}} />\r\n  //   )\r\n  // }\r\n\r\n  // toggleRemovePlayerModal = () => {\r\n  //   this.setState({ showRemovePlayerModal: true });\r\n  // }\r\n\r\n  // waitText = () => {\r\n  //   return \"Oh wow!\";\r\n  //   // return '<div>'+'<p>Waiting for everyone to finish the round.</p>'+'<p>In the meantime, enjoy this dancing unicorn</p>'+'</div>';\r\n  // }\r\n\r\n  render() {\r\n    // let allPlayers = this.props.allPlayers;\r\n    // let playerBoard = [];\r\n    // for (let q = 0; q < allPlayers.length; q++) {\r\n    //   playerBoard.push(allPlayers[q].name);\r\n    // }\r\n    let waitText = \"\";\r\n    let snark = \"\";\r\n    // let snarkyWaitingLine = \"\";\r\n    if (!this.props.finalStory) {\r\n      waitText = `${this.state.playersStillWorking}`;\r\n      // snarkyWaitingLine = `${this.state.snarkyWaitingLine}`;\r\n    }\r\n    else {\r\n      waitText = null;\r\n      // snarkyWaitingLine = null;\r\n    }\r\n    if (this.state.showSnarkyWaitingLine && !this.state.everyoneHasSubmitted && !this.props.finalStory) {\r\n      snark = ` ${this.state.snarkyWaitingLine}`;\r\n    }\r\n\r\n    //variables, logic and so on here\r\n    let lastLine;\r\n    let previousPersonsWriting = this.state.previousPersonsWriting;\r\n    let length = previousPersonsWriting.length;\r\n    let spaceCounter = 0;\r\n    for (let i = length - 50; i > 0 ; i--) {\r\n      if (previousPersonsWriting[i] === \" \") {\r\n        spaceCounter = spaceCounter + 1;\r\n        lastLine = \"...\" + previousPersonsWriting.slice(i + 1, length);\r\n        i = 0;\r\n      }\r\n    }\r\n    if (spaceCounter === 0) {\r\n      lastLine = previousPersonsWriting.slice(length - 50, length);\r\n    }\r\n\r\n      return (\r\n        <div>\r\n          {!this.state.storySubmitted && !this.props.hasFinalStory ? (\r\n          <div>\r\n          <h1>Your Story</h1>\r\n            <p>Round {this.state.currentRound} of {this.props.rounds}</p>\r\n            {this.state.previousPersonsWriting === \"Example\" ? (\r\n              <div>\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                This is what {this.state.previousPerson} wrote for you:\r\n                <div>{lastLine}</div>\r\n              </div>\r\n            )}\r\n            <form>\r\n\r\n              {this.state.isLastRound === false ? (\r\n                <div>\r\n                  <div className=\"form-group\">\r\n                    <label></label>\r\n                    <textarea className=\"form-control text-monospace\" maxLength=\"150\"\r\n                    onChange={this.updateStory}\r\n                    onClick={this.deleteDefaultText}\r\n                    defaultValue={this.state.nudgeText} />\r\n                  </div>\r\n                  <p>Characters remaining: {this.state.charactersLeft} </p>\r\n                  <p><ProgressBar now={this.state.charactersUsed} min=\"0\" max=\"135\" /></p>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <div className=\"form-group\">\r\n                    <label></label>\r\n                    <textarea className=\"form-control text-monospace\"\r\n                    onChange={this.updateStory}\r\n                    onClick={this.deleteDefaultText}\r\n                    defaultValue={this.state.nudgeText} />\r\n                  </div>\r\n                  <p>\r\n                    Finish the story (no character limit).\r\n                  </p>\r\n                </div>\r\n              )\r\n            }\r\n\r\n              </form>\r\n\r\n              {this.state.submitStory && !this.state.storySubmitted ? (\r\n                <p>\r\n                  Confirm submission?\r\n                  <p>\r\n                  </p>\r\n                  <p>\r\n                    <Button variant=\"success\" onClick={this.putWriting}>Yes</Button>\r\n                    {' '}\r\n                    <Button variant=\"danger\" onClick={this.neverMind}>No</Button>\r\n                  </p>\r\n                </p>\r\n                ) : (\r\n                <div>\r\n                </div>\r\n                )\r\n              }\r\n\r\n              {!this.state.storySubmitted &&\r\n                !this.state.submitStory &&\r\n                this.state.charactersLeft > 15 && !this.state.isLastRound ? (\r\n                <Button variant=\"primary\" disabled>Submit</Button>\r\n                ) : (\r\n                <div>\r\n                </div>\r\n                )\r\n              }\r\n\r\n              {(!this.state.storySubmitted &&\r\n                !this.state.submitStory &&\r\n                this.state.charactersLeft <= 15) || (this.state.isLastRound && !this.state.storySubmitted &&\r\n                  !this.state.submitStory) ? (\r\n                    <Button variant=\"primary\" onClick={this.tryToSubmit}>Submit</Button>\r\n                ) : (\r\n                <div>\r\n                </div>\r\n                )\r\n              }\r\n\r\n              {this.props.isHost && this.state.endGame ? (\r\n                <p>\r\n                  <Button variant=\"danger\">Are you sure you want to end the game for everyone?</Button>\r\n                  <button>Yes</button>\r\n                  <button>No</button>\r\n                </p>\r\n                ) : (\r\n                <div>\r\n                </div>\r\n                )\r\n              }\r\n\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              {waitText}{snark}\r\n            </div>\r\n          )\r\n        }\r\n\r\n        {this.props.hasFinalStory ? (\r\n          <div>\r\n            <p>Everyone's turned in their story.</p>\r\n            <p>Reveal yours below.</p>\r\n              <Link to='/story'>\r\n                <Button variant=\"success\">Reveal My Story</Button>\r\n              </Link>\r\n          </div>\r\n          ) : (\r\n            <div>\r\n            </div>\r\n          )\r\n        }\r\n\r\n        {this.props.isHost && !this.props.hasFinalStory ? ( \r\n          <div>\r\n            <p>\r\n\r\n            </p>\r\n            <RemovePlayerModal \r\n              allPlayers={this.props.allPlayers} \r\n              removePlayer={this.props.removePlayer} \r\n              playerToDelete={this.props.playerToDelete}\r\n              updatePlayerToDelete={this.props.updatePlayerToDelete}\r\n              appLevelRound={this.props.appLevelRound}\r\n              removablePlayers = {this.props.removablePlayers}\r\n              updateRemovablePlayers = {this.props.updateRemovablePlayers}\r\n              resetPlayerToDelete = {this.props.resetPlayerToDelete}\r\n              />\r\n          </div>\r\n        ) : (\r\n          <div>\r\n          </div>\r\n        )\r\n        }\r\n\r\n      {!this.state.storySubmitted && !this.props.hasFinalStory? (\r\n        <div>\r\n        <p></p>\r\n        <HelpModal />\r\n        </div>\r\n      ) : (\r\n        <div>\r\n        </div>\r\n      )}\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n\r\nexport default Writingpaper;\r\n\r\n\r\n\r\n/*{this.props.isHost ? (\r\n  <div>\r\n    <p>\r\n      <button>Make this the last round (make this toggle)</button>\r\n    </p>\r\n  </div>\r\n  ) : (\r\n  <div>\r\n  </div>\r\n  )\r\n}\r\n\r\n{this.props.isHost && !this.state.endGame ? (\r\n  <button>End Game</button>\r\n  ) : (\r\n  <div>\r\n  </div>\r\n  )\r\n}\r\n\r\n{this.state.needHelp ? (\r\n  <div>\r\n    <p>\r\n      Helpy stuff here\r\n    </p>\r\n  </div>\r\n  ) : (\r\n  <div>\r\n    <button>Help</button>\r\n  </div>\r\n  )\r\n}*/\r\n","import React from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\n// import { Button } from 'react-bootstrap';\r\n\r\nclass MainPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      gameIdValue: \"\"\r\n    }\r\n  }\r\n\r\n  deleteDefaultText = (e) => {\r\n      console.log(\"hey\");\r\n    if (e.target.value === \"Enter game code\") {\r\n      e.target.value = \"\";\r\n    }\r\n  }\r\n\r\n  updateGameIdValue = (e) => {\r\n    this.props.updateGameId(e.target.value);\r\n    this.props.updateGameIdUrl(e.target.value);\r\n  }\r\n\r\n  updateGameIdNow = () => {\r\n    console.log(\"hello\");\r\n    this.props.updateGameId(this.state.gameIdValue);\r\n  }\r\n\r\n  render() {\r\n    //variables, logic and so on here\r\n      return (\r\n        <div>\r\n          <button class=\"btn btn-success\">\r\n            <Link to='/home'>Create Game</Link>\r\n          </button>\r\n          <div>\r\n          Enter code for existing game\r\n          </div>\r\n          <div className=\"form-group\" controlId=\"exampleForm.ControlTextarea1\">\r\n                <p></p>\r\n                  <textarea className=\"form-control\" defaultValue=\"Enter game code\" onClick={this.deleteDefaultText} onChange={this.updateGameIdValue} ref={(textarea) => this.textArea = textarea}/>\r\n              </div>\r\n          <button class=\"btn btn-success\">\r\n            <Link to='/join'>Join</Link>\r\n          </button>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default MainPage;\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport SimpleStorage from \"react-simple-storage\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport axios from 'axios';\n\n//The real components\nimport WaitScreen from './components/gamecreation/WaitScreen.js';\nimport Join from './components/signup/Join.js'\nimport StoryRevealed from './components/storyrevealed/StoryRevealed.js';\nimport HomeScreen from './components/welcomescreen/HomeScreen.js';\nimport WritingPaper from './components/writingpaper/WritingPaper.js';\nimport MainPage from './components/mainpage/MainPage.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameId: null,\n      gameIdUrl: null,\n      gameIndex: null,\n      players: [],\n      allPlayers: [{name: \"Loading Players\", _id: \"Test ID\"}],\n      removablePlayers: [{name: \"Loading Players\", _id: \"Test ID\"}],\n      playerName: \"\",\n      playerAvatar: \"🤠\",\n      playerNumber: null,\n      playerId: null,\n      rounds: 3,\n      appLevelRound: 1,\n      doesGameIdExist: null,\n      isHost: false,\n      finalStory: null,\n      hasFinalStory: false,\n      playerChoseAvatar: false,\n      playerToDelete: null,\n      playerNumberToDelete: null\n    }\n  }\n\n  removePlayer = (round) => {\n    let newRemovablePlayers = [];\n    // console.log(`newRemovablePlayers is ${newRemovablePlayers}`);\n    for (let i = 0; i < this.state.removablePlayers.length; i++) {\n      if (i !== this.state.playerNumberToDelete - 1) {\n        newRemovablePlayers.push(this.state.removablePlayers[i]);\n        // console.log(`newRemovablePlayers is now ${newRemovablePlayers}`);\n      }\n    }\n    // console.log(`newRemovablePlayers is finally ${newRemovablePlayers}`);\n    this.setState({ removablePlayers: newRemovablePlayers });\n    axios.put(`api/players/delete/${this.state.gameId}/${this.state.appLevelRound}/${this.state.playerToDelete}`)\n        .then(res => this.setState({ \n          allPlayers: res.data[0].players,\n          playerToDelete: null,\n          playerNumberToDelete: null\n          //add in something to update removablePlayers\n          //maybe get the number of the deletedPlayer and remove that from the remoavlePlayers array?\n         })\n          );\n    // this.updateRemovablePlayers();\n\n        // .then(res => console.log(res));\n  }\n\n  removePreviousFinalStory = () => {\n    this.setState({ finalStory: null });\n  }\n\n  resetPlayerChoseAvatar = () => {\n    this.setState({ playerChoseAvatar: false });\n  }\n\n  resetPlayerToDelete = () => {\n    this.setState({ playerToDelete: null });\n  }\n\n  resetRounds = () => {\n    this.setState({ rounds: 3 });\n  }\n\n  resetPlayerName = () => {\n    this.setState({ playerName: null });\n  }\n\n  resetPlayerId = () => {\n    this.setState({ playerId: null });\n  }\n\n  resetAppLevelRound = () => {\n    this.setState({ appLevelRound: 1 });\n  }\n\n  resetHasFinalStory = () => {\n    this.setState({ hasFinalStory: false });\n  }\n\n  resetRemovablePlayers = () => {\n    this.setState({ removablePlayers: [{name: \"Loading Players\", _id: \"Test ID\"}]});\n  }\n\n  resetAllPlayers = () => {\n    this.setState({ allPlayers: [] });\n  }\n\n\n  updateGameId = (gameIdValue) => {\n    this.setState({ gameId: gameIdValue });\n  }\n\n  updateGameIdUrl = (gameIdUrl) => {\n    // console.log(`the gameIdUrl is ${gameIdUrl}`);\n    this.setState({ gameIdUrl: gameIdUrl });\n  }\n\n  updateHost = () => {\n    this.setState({ isHost: true });\n  }\n\n  removeHostStatus = () => {\n    this.setState({ isHost: false });\n  }\n\n  // updateRoundNumber = (number) => {\n  //   if (this.state.rounds - this.state.currentRound === 0) { //changed this from 1 to 0\n  //     this.setState({ isLastRound: true})\n  //   }\n  //   this.setState({ currentRound: number })\n  // }\n\n  updatePlayerNumber = (playerNumber) => {\n    this.setState({ playerNumber: playerNumber })\n  }\n\n  updatePlayerId = (playerId) => {\n    this.setState({ playerId: playerId })\n  }\n\n  howManyRounds = (rounds) => {\n    this.setState({ rounds: rounds })\n  }\n\n  hostSetsRoundNumber = (e) => {\n    this.setState({ rounds: e.target.value });\n    // console.log(\"howdy\");\n  }\n\n  updateName = (e) => {\n    this.setState({ playerName: e.target.value });\n  }\n\n  updateAvatar = (avatar) => {\n    this.setState({ playerAvatar: avatar }); //changed this from e.target.value\n    this.setState({ playerChoseAvatar: true}); //this make the alert show up\n  }\n\n  updateFinalStory = (finalStory) => {\n    this.setState({ finalStory: finalStory })\n  }\n\n  updateHasFinalStory = () => {\n    this.setState({ hasFinalStory: true })\n  }\n\n  updateAllPlayers = (info) => {\n    this.setState({ allPlayers: info });\n  }\n\n  // updateRemovablePlayers = (info, boolean) => {\n  //   if (boolean) {\n  //     let removablePlayers = info.shift();\n  //     this.setState({ removablePlayers: removablePlayers});\n  //   }\n  //   else {\n  //     this.setState({ removablePlayers: info });\n  //   }\n  // }\n\n  updateRemovablePlayers = (playerInfo) => {\n    // if (this.state.allPlayers === [] || !this.state.allPlayers || this.state.allPlayers === undefined) {\n    //   return;\n    // }\n    if (playerInfo) {\n      // console.log(\"we got some player info!\");\n      let removablePlayers = [];\n      for (let i = 1; i < playerInfo.length; i++) {\n        removablePlayers.push(playerInfo[i]);\n        // console.log(`removablePlayers is now ${removablePlayers}`);\n      }\n      // console.log(`OUT OF THE LOOP. removablePlayers is now ${removablePlayers}`);\n      this.setState({ removablePlayers: removablePlayers });\n    }\n    else {\n      let removablePlayers = [];\n      for (let i = 1; i < this.state.allPlayers.length; i++) {\n        removablePlayers.push(this.state.allPlayers[i]);\n        // console.log(`removablePlayers is now ${removablePlayers}`);\n      }\n      // console.log(`OUT OF THE LOOP. removablePlayers is now ${removablePlayers}`);\n      this.setState({ removablePlayers: removablePlayers });\n    }\n    this.updatePlayerToDelete(false, this.state.removablePlayers[0]);\n  }\n\n  updatePlayerToDelete = (e, playerNumber) => {\n    // console.log(\"wer're in UpdatePlayerToDelete\");\n    // console.log(e);\n    // console.log(playerNumber);\n    // console.log(e.target.funtime);\n    // console.log(e.target.className);\n    // console.log(e.target.type);\n    if (e && playerNumber) {\n      // console.log(\"there is an e and playerNumber\");\n      // console.log(e);\n      // console.log(e.target);\n      // console.log(e.target.id);\n      playerNumber = parseInt(playerNumber);\n      // console.log(playerNumber);\n      this.setState({ \n      playerToDelete: e.target.id,\n      playerNumberToDelete: playerNumber \n      });\n    }\n    else if (!e && playerNumber) { // If you've just deleted a player and want to update the Removable Players\n    // console.log(\"there is no e, but there is a playerNumber\");\n      this.setState({ \n        playerToDelete: null,\n        playerNumberToDelete: null\n      }); \n    }\n    else if (!e && !playerNumber) { // If you close the Modal, this happens\n      if (this.state.playerToDelete === null && this.state.playerNumberToDelete === null) {\n        return;\n      }\n      // console.log(\"there isn't an e or a playerNumber\");\n      this.setState({ \n        playerToDelete: null,\n        playerNumberToDelete: null\n      }); \n    }\n    else {\n      // console.log(\"theres no playerNumber\");\n      return;\n    }\n    // console.log(e.target);\n    // if (e.target.id === this.state.playerToDelete) {\n    //   this.setState({ \n    //     playerToDelete: null,\n    //     playerNumberToDelete: null \n    //   });\n    // }\n    // else {\n    // }\n  }\n\n  startGame = () => {\n    this.updateRemovablePlayers();\n    if (this.state.isHost) {\n      axios.put(`api/games/${this.state.gameId}/startGame`)\n    }\n    else {\n      return;\n    }\n  }\n\n  updateAppLevelRound = () => {\n    this.setState({ appLevelRound: this.state.appLevelRound + 1 });\n  }\n\n\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n          <SimpleStorage parent={this} />\n          <br/>\n          <Route\n            path=\"/waitscreen\"\n            render={(props) => (\n              <WaitScreen {...props}\n              startGame={this.startGame}\n              players={this.state.players}\n              test1 = {this.test1}\n              gameIdUrl = {this.state.gameIdUrl}\n              gameId = {this.state.gameId}\n              isHost = {this.state.isHost}\n              updateGameIdUrl = {this.updateGameIdUrl}\n              updateHost = {this.updateHost}\n              playerNumber = {this.state.playerNumber}\n              playerName = {this.state.playerName}\n              playerAvatar = {this.state.playerAvatar}\n              rounds = {this.state.rounds} \n              updateAllPlayers = {this.updateAllPlayers}\n              updateRemovablePlayers = {this.updateRemovablePlayers}\n              allPlayers={this.state.allPlayers}\n              />\n            )}\n          />\n          <Route path=\"/join\" render={(props) => (\n            <Join {...props}\n            state={this.state}\n            gameIdUrl = {this.state.gameIdUrl}\n            gameId = {this.state.gameId}\n            updateGameId = {this.updateGameId}\n            updateGameIdUrl = {this.updateGameIdUrl}\n            updatePlayerNumber = {this.updatePlayerNumber}\n            updatePlayerId = {this.updatePlayerId}\n            howManyRounds = {this.howManyRounds}\n            playerName = {this.state.playerName}\n            playerAvatar = {this.state.playerAvatar}\n            updateName = {this.updateName}\n            updateAvatar = {this.updateAvatar}\n            playerChoseAvatar = {this.state.playerChoseAvatar}\n            removeHostStatus = {this.removeHostStatus}\n            removePreviousFinalStory = {this.removePreviousFinalStory}\n            resetPlayerChoseAvatar = {this.resetPlayerChoseAvatar}\n            resetPlayerToDelete = {this.resetPlayerToDelete}\n            resetRounds = {this.resetRounds}\n            resetPlayerName = {this.resetPlayerName}\n            resetAppLevelRound = {this.resetAppLevelRound}\n            resetHasFinalStory = {this.resetHasFinalStory}\n            resetPlayerId = {this.resetPlayerId}\n            resetRemovablePlayers = {this.resetRemovablePlayers}\n            resetAllPlayers = {this.resetAllPlayers}\n            />\n            )}\n          />\n          <Route path=\"/story\" render={(props) => (\n            <StoryRevealed {...props}\n            test1 = {this.test1}\n            playerNumber = {this.state.playerNumber}\n            finalStory = {this.state.finalStory}\n            isHost={this.state.isHost}\n            playerName = {this.state.playerName}\n            playerAvatar = {this.state.playerAvatar} />\n          )}\n          />\n          <Route exact path=\"/\" render={(props) => (\n            <HomeScreen {...props}\n            gameIdUrl = {this.state.gameIdUrl}\n            updateGameId = {this.updateGameId}\n            isHost = {this.props.isHost}\n            gameId = {this.state.gameId}\n            updateGameIdUrl = {this.updateGameIdUrl}\n            updatePlayerNumber = {this.updatePlayerNumber}\n            updatePlayerId = {this.updatePlayerId}\n            howManyRounds = {this.howManyRounds}\n            rounds = {this.state.rounds}\n            updateName = {this.updateName}\n            updateAvatar = {this.updateAvatar}\n            updateHost = {this.updateHost}\n            playerNumber = {this.state.playerNumber}\n            playerName = {this.state.playerName}\n            playerAvatar = {this.state.playerAvatar}\n            playerChoseAvatar = {this.state.playerChoseAvatar}\n            hostSetsRoundNumber = {this.hostSetsRoundNumber}\n            removePreviousFinalStory = {this.removePreviousFinalStory}\n            resetPlayerChoseAvatar = {this.resetPlayerChoseAvatar}\n            resetPlayerToDelete = {this.resetPlayerToDelete}\n            resetRounds = {this.resetRounds}\n            resetPlayerName = {this.resetPlayerName}\n            resetAppLevelRound = {this.resetAppLevelRound}\n            resetHasFinalStory = {this.resetHasFinalStory}\n            resetPlayerId = {this.resetPlayerId}\n            resetRemovablePlayers = {this.resetRemovablePlayers}\n            resetAllPlayers = {this.resetAllPlayers}\n            />\n          )}\n          />\n          <Route exact path=\"/backUpHome\" render={(props) => (\n            <MainPage {...props}\n            updateGameId = {this.updateGameId}\n            />\n          )}\n          />\n          <Route path=\"/writing\" render={(props) => (\n            <WritingPaper {...props}\n            isHost={this.state.isHost}\n            updateRoundNumber={this.updateRoundNumber}\n            playerNumber = {this.state.playerNumber}\n            updatePlayerNumber = {this.updatePlayerNummber}\n            gameId = {this.state.gameId}\n            rounds = {this.state.rounds}\n            finalStory = {this.state.finalStory}\n            updateFinalStory = {this.updateFinalStory}\n            hasFinalStory={this.state.hasFinalStory}\n            updateHasFinalStory={this.updateHasFinalStory}\n            allPlayers = {this.state.allPlayers}\n            removePlayer = {this.removePlayer}\n            playersToDelete = {this.playersToDelete}\n            updatePlayerToDelete = {this.updatePlayerToDelete}\n            updateAllPlayers = {this.updateAllPlayers}\n            playerName = {this.state.playerName}\n            updateAppLevelRound = {this.updateAppLevelRound}\n            appLevelRound = {this.state.appLevelRound}\n            removablePlayers = {this.state.removablePlayers}\n            updateRemovablePlayers = {this.updateRemovablePlayers}\n            resetPlayerToDelete = {this.resetPlayerToDelete}\n            />\n          )}\n          />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}